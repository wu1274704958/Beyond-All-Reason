#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  rflare, lflare, torso, pelvis, lleg, rleg, lbarrel,
       rbarrel,head,lthigh,rthigh, aimy1, aimx1;

static-var  gun_3, restore_delay, animSpeed, maxSpeed, animFramesPerKeyframe, bMoving,wpn2_lasthead;

// Signal definitions
#define SIG_MOVE			2
#define SIG_WALK			4
#define SIG_AIM_3			8


Walk() {//Created by https://github.com/Beherith/Skeletor_S3O from N:\animations\corcrash_anim_walk.blend 
	set-signal-mask SIG_WALK;
	if (bMoving) { //Frame:4
			turn head to x-axis <-4.000000> speed <119.999986> / animSpeed; 
			move lleg to z-axis [-2.190000] speed [65.700002] / animSpeed; 
			move lthigh to z-axis [-3.610000] speed [108.299997] / animSpeed; 
			move rleg to z-axis [2.700000] speed [81.000001] / animSpeed; 
			move rthigh to z-axis [4.064210] speed [121.926298] / animSpeed; 
			turn torso to x-axis <5.200000> speed <155.999992> / animSpeed; 
			turn torso to z-axis <5.200000> speed <155.999992> / animSpeed; 
			turn torso to y-axis <-5.200000> speed <155.999992> / animSpeed; 
		sleep 131;
	}
	while(bMoving) {
		if (bMoving) { //Frame:8
			turn head to x-axis <-0.000000> speed <119.999986> / animSpeed; 
			turn head to y-axis <4.000000> speed <119.999986> / animSpeed; 
			move lleg to z-axis [0.000000] speed [65.700002] / animSpeed; 
			move lthigh to z-axis [0.000000] speed [108.299997] / animSpeed; 
			move pelvis to x-axis [0.674931] speed [20.247923] / animSpeed; 
			move pelvis to y-axis [0.928030] speed [27.840895] / animSpeed; 
			turn pelvis to z-axis <-7.375208> speed <221.256252> / animSpeed; 
			move rleg to z-axis [0.000000] speed [81.000001] / animSpeed; 
			move rthigh to z-axis [0.000000] speed [121.926298] / animSpeed; 
			turn torso to x-axis <-0.000000> speed <155.999992> / animSpeed; 
			turn torso to z-axis <13.299999> speed <242.999971> / animSpeed; 
			turn torso to y-axis <0.000000> speed <155.999992> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:12
			turn head to x-axis <4.000000> speed <119.999999> / animSpeed; 
			turn head to y-axis <0.000000> speed <119.999986> / animSpeed; 
			move lleg to z-axis [2.700000] speed [81.000001] / animSpeed; 
			move lthigh to z-axis [4.064210] speed [121.926298] / animSpeed; 
			move pelvis to x-axis [0.000000] speed [20.247923] / animSpeed; 
			move pelvis to y-axis [0.000000] speed [27.840895] / animSpeed; 
			turn pelvis to z-axis <-0.000000> speed <221.256252> / animSpeed; 
			move rleg to z-axis [-2.190000] speed [65.700002] / animSpeed; 
			move rthigh to z-axis [-3.610000] speed [108.299997] / animSpeed; 
			turn torso to x-axis <4.500000> speed <135.000004> / animSpeed; 
			turn torso to z-axis <-5.699999> speed <569.999948> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:16
			turn head to x-axis <-0.000000> speed <119.999999> / animSpeed; 
			turn head to y-axis <-4.000000> speed <119.999999> / animSpeed; 
			move lleg to z-axis [0.000000] speed [81.000001] / animSpeed; 
			move lthigh to z-axis [0.000000] speed [121.926298] / animSpeed; 
			move pelvis to x-axis [-0.295282] speed [8.858466] / animSpeed; 
			move pelvis to y-axis [1.138946] speed [34.168371] / animSpeed; 
			turn pelvis to z-axis <7.287505> speed <218.625160> / animSpeed; 
			move rleg to z-axis [0.000000] speed [65.700002] / animSpeed; 
			move rthigh to z-axis [0.000000] speed [108.299997] / animSpeed; 
			turn torso to x-axis <-0.000000> speed <135.000004> / animSpeed; 
			turn torso to z-axis <-12.899999> speed <215.999986> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:20
			turn head to x-axis <-4.000000> speed <119.999986> / animSpeed; 
			turn head to y-axis <0.000000> speed <119.999999> / animSpeed; 
			move lleg to z-axis [-2.190000] speed [65.700002] / animSpeed; 
			move lthigh to z-axis [-3.610000] speed [108.299997] / animSpeed; 
			move pelvis to x-axis [0.000000] speed [8.858466] / animSpeed; 
			move pelvis to y-axis [0.000000] speed [34.168371] / animSpeed; 
			turn pelvis to z-axis <-0.000000> speed <218.625160> / animSpeed; 
			move rleg to z-axis [2.700000] speed [81.000001] / animSpeed; 
			move rthigh to z-axis [4.064210] speed [121.926298] / animSpeed; 
			turn torso to x-axis <5.200000> speed <155.999992> / animSpeed; 
			turn torso to z-axis <5.200000> speed <542.999962> / animSpeed; 
			turn torso to y-axis <-5.200000> speed <155.999992> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
	}
}
// Call this from MotionControl()!
StopWalking() {
	move lleg to z-axis [0.000000] speed [20.250000];
	move lthigh to z-axis [0.000000] speed [30.481575];
	move pelvis to x-axis [0.000000] speed [5.061981];
	move pelvis to y-axis [0.000000] speed [8.542093];
	move rleg to z-axis [0.000000] speed [20.250000];
	move rthigh to z-axis [0.000000] speed [30.481575];
	turn head to x-axis <0.000000> speed <30.000000>;
	turn head to y-axis <0.000000> speed <30.000000>;
	turn pelvis to z-axis <0.000000> speed <55.314063>;
	turn torso to x-axis <0.000000> speed <38.999998>;
	turn torso to y-axis <0.000000> speed <38.999998>;
	turn torso to z-axis <0.000000> speed <142.499987>;
}

UnitSpeed(){
 maxSpeed = get MAX_SPEED; // this returns cob units per frame i think
 animFramesPerKeyframe = 4; //we need to calc the frames per keyframe value, from the known animtime
 maxSpeed = maxSpeed + (maxSpeed /(2*animFramesPerKeyframe)); // add fudge
 while(TRUE){
  animSpeed = (get CURRENT_SPEED);
  if (animSpeed<1) animSpeed=1;
  animSpeed = (maxSpeed * 4) / animSpeed; 
  //get PRINT(maxSpeed, animFramesPerKeyframe, animSpeed);
  if (animSpeed<2) animSpeed=2;
  if (animspeed>8) animSpeed = 8;
  sleep 131;
 }
}



#define BASEPIECE pelvis
#define HITSPEED <65.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

StartMoving()
{
	signal SIG_WALK;
	set-signal-mask SIG_WALK;
	bMoving = TRUE;
	start-script UnitSpeed();
	start-script walk();
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_WALK;
	call-script StopWalking();
}

Create()
{
	hide lflare;
	hide rflare;
	hide aimy1;
	gun_3 = lflare;
	restore_delay = 3000;
	bMoving = FALSE;
	animSpeed = 4;
	call-script StopMoving();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 5;
}

SweetSpot(piecenum)
{
	piecenum = pelvis;
}

AimFromPrimary(piecenum)
{
	piecenum = head;
}

QueryPrimary(piecenum)
{
	piecenum = rflare + gun_3;
}

AimFromSecondary(piecenum)
{
	piecenum = head;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = rflare + gun_3;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn aimy1 to y-axis <0.000000> speed <90.000000>;
	turn aimx1 to x-axis <0.000000> speed <90.000000>;
	wpn2_lasthead = 1000000;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	set-signal-mask SIG_AIM_3;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_3;
	turn aimy1 to y-axis heading speed <225.000000>;
	turn aimx1 to x-axis  <0.000000> - pitch speed <225.000000>;
	if (((get ABS(wpn2_lasthead - heading)) > 65536) OR(((get ABS(wpn2_lasthead - heading)) > 5000) AND ((get ABS(wpn2_lasthead - heading)) < 60536)))
	{
		wpn2_lasthead = 1000000;
		wait-for-turn aimy1 around y-axis;
	}
	wpn2_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if( gun_3 )
	{
		move lbarrel to z-axis [-3.750000] speed [62.500000];
		wait-for-move rbarrel along z-axis;
		move lbarrel to z-axis [0.000000] speed [7.500000];
	}
	else
	{
		move rbarrel to z-axis [-3.750000] speed [62.500000];
		wait-for-move lbarrel along z-axis;
		move rbarrel to z-axis [0.000000] speed [7.500000];
	}
	gun_3 = !gun_3;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode pelvis type BITMAPONLY | NOHEATCLOUD;
		explode torso type BITMAPONLY | NOHEATCLOUD;
		explode head type BITMAPONLY | NOHEATCLOUD;
		explode lbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lflare type BITMAPONLY | NOHEATCLOUD;
		//explode rbarrel type BITMAPONLY | NOHEATCLOUD;
		//explode rflare type BITMAPONLY | NOHEATCLOUD;
		//explode rthigh type BITMAPONLY | NOHEATCLOUD;
		//explode rleg type BITMAPONLY | NOHEATCLOUD;
		//explode lthigh type BITMAPONLY | NOHEATCLOUD;
		//explode lleg type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode pelvis type BITMAPONLY | NOHEATCLOUD;
		explode torso type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode head type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lbarrel type FALL | NOHEATCLOUD;
		explode lflare type FALL | NOHEATCLOUD;
		//explode rbarrel type FALL | NOHEATCLOUD;
		//explode rflare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rthigh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lthigh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode pelvis type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type SMOKE | FALL | NOHEATCLOUD;
		explode head type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode lbarrel type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode lflare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode rbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rflare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rthigh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lthigh type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode lleg type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode pelvis type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode head type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lbarrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lflare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode rbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rflare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode rthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode rleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode lthigh type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode lleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
